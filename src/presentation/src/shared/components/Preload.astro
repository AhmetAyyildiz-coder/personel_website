---
import AhmetCetinkayaCodeSpaceWallpaperPart1 from "../../features/desktop/components/Wallpaper/assets/images/ahmet-cetinkaya-code-space-wallpaper/part-1_optimized.webp";
import AhmetCetinkayaCodeSpaceWallpaperPart1Medium from "../../features/desktop/components/Wallpaper/assets/images/ahmet-cetinkaya-code-space-wallpaper/part-1_optimized-1080.webp";
import AhmetCetinkayaCodeSpaceWallpaperPart1Small from "../../features/desktop/components/Wallpaper/assets/images/ahmet-cetinkaya-code-space-wallpaper/part-1_optimized-720.webp";
import AhmetCetinkayaCodeSpaceWallpaperPart2 from "../../features/desktop/components/Wallpaper/assets/images/ahmet-cetinkaya-code-space-wallpaper/part-2_optimized.webp";
import AhmetCetinkayaCodeSpaceWallpaperPart2Medium from "../../features/desktop/components/Wallpaper/assets/images/ahmet-cetinkaya-code-space-wallpaper/part-2_optimized-1080.webp";
import AhmetCetinkayaCodeSpaceWallpaperPart2Small from "../../features/desktop/components/Wallpaper/assets/images/ahmet-cetinkaya-code-space-wallpaper/part-2_optimized-720.webp";
import RetroComputerModelPreview from "../../shared/components/ThreeDimensionalModels/assets/images/retro-computer-model-preview.webp";
import EnvelopeModelPreview from "../../shared/components/ThreeDimensionalModels/assets/images/envelope-model-preview.webp";

type PreloadImage =
  | {
      default: ImageMetadata;
      medium?: ImageMetadata;
      small?: ImageMetadata;
    }
  | ImageMetadata;

const images: PreloadImage[] = [
  {
    default: AhmetCetinkayaCodeSpaceWallpaperPart1,
    medium: AhmetCetinkayaCodeSpaceWallpaperPart1Medium,
    small: AhmetCetinkayaCodeSpaceWallpaperPart1Small,
  },
  {
    default: AhmetCetinkayaCodeSpaceWallpaperPart2,
    medium: AhmetCetinkayaCodeSpaceWallpaperPart2Medium,
    small: AhmetCetinkayaCodeSpaceWallpaperPart2Small,
  },
  RetroComputerModelPreview,
  EnvelopeModelPreview,
];

function roundWidth(width: number) {
  const magnitude = Math.pow(10, Math.floor(Math.log10(width)));
  return Math.floor(width / magnitude) * magnitude;
}
---

{
  images.map((image) =>
    typeof image === "object" && "default" in image ? (
      <link
        rel="preload"
        href={image.default.src}
        as="image"
        type="image/webp"
        imagesrcset={`${image.small?.src ? `${image.small.src} ${roundWidth(image.small.width)}w,` : ""}${image.medium?.src ? `${image.medium.src} ${roundWidth(image.medium.width)}w,` : ""}${image.default.src} ${roundWidth(image.default.width)}w`}
        imagesizes={`${image.small?.width ? `(max-width: ${roundWidth(image.small.width)}px) ${roundWidth(image.small.width)}px,` : ""}${image.medium?.width ? `(max-width: ${roundWidth(image.medium.width)}px) ${roundWidth(image.medium.width)}px,` : ""}${roundWidth(image.default.width)}px`}
      />
    ) : (
      <link rel="preload" href={image.src} as="image" type="image/webp" />
    ),
  )
}
